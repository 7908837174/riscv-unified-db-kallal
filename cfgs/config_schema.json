{
  "$schema": "http://json-schema.org/draft-07/schema#",

  "$defs": {
    "params": {
      "type": "object",
      "required": ["NAME", "XLEN"],
      "properties": {
        "XLEN": {
          "enum": [32, 64],
          "description": "Base instruction set datapath width"
        },
        "NAME": {
          "type": "string",
          "description": "Name of the configuration"
        },
        "ASID_WIDTH": {
          "type": "number",
          "maximum": 16,
          "manimum": 0,
          "description": "Number of implemented ASID bits"
        },
        "NUM_PMP_ENTRIES": {
          "type": "number",
          "maximum": 64,
          "minimum": 0,
          "description": "Number of implemented PMP entries"
        },
        "ARCH_ID": {
          "type": "number",
          "minimum": 0,
          "maximum": 18446744073709551615,
          "description": "Vendor-specific architecture ID presented in `marchid`"
        },
        "IMP_ID": {
          "type": "number",
          "minimum": 0,
          "maximum": 18446744073709551615,
          "description": "Vendor-specific implementation ID present in `mimpid`"
        },
        "MISALIGNED_LDST": {
          "type": "boolean",
          "description": " whether or not the implementation supports misaligned loads and stores in main memory (not including atomics). Must be true when extension Zicclsm is implemented."
        },
        "MISALIGNED_AMO": {
          "type": "boolean",
          "description": " whether or not the implementation supports misaligned atomics.",
          "default": false
        },
        "NUM_HPM_COUNTERS": {
          "type": "number",
          "minimum": 0,
          "maximum": 29,
          "description": "Number of implemented programmable hardware counters (not including cycle, time, and instret)"
        },
        "TRAP_ON_ILLEGAL_WLRL": {
          "type": "boolean",
          "default": true,
          "description": "When true, writing an illegal value to a WLRL CSR field raises an Illegal Instruction exception.\nWhen false, writing an illegal value to a WLRL CSR field is ignored."
        },
        "REPORT_EBREAK_PC_IN_TVAL": {
          "type": "boolean",
          "description": " when true, *tval is written with the virtual PC of the EBREAK instruction (same information as *epc).\nwhen false, *tval is written with 0 on an EBREAK instruction\n\nregardless, *tval is always written with a virtual PC when an external breakpoint is generated."
        },
        "CONFIG_PTR_ADDRESS": {
          "type": "number",
          "minimum": 0,
          "maximum": 18446744073709551615,
          "description": "Physical address of the unified discovery configuration data structure (reported in `mconfigptr`)."
        },
        "PMP_GRANULARITY": {
          "type": "number",
          "minimum": 2,
          "maximum": 66,
          "description": "log2 of the smallest supported PMP region."
        },
        "PMA_GRANULARITY": {
          "type": "number",
          "minimum": 2,
          "maximum": 66,
          "description": "log2 of the smallest supported PMA region."
        },
        "PHYS_ADDR_WIDTH": {
          "type": "number",
          "minimum": 1,
          "maximum": 36028797018963968,
          "description": "Number of bits in the physical address space"
        },
        "MUTABLE_MISA_C": {
          "type": "boolean",
          "default": "false",
          "description": "When C extension is supported, wether or not it can be dynamically disabled by writing the `misa.C` bit."
        },
        "CACHE_BLOCK_SIZE": {
          "type": "number",
          "minimum": 1,
          "maximum": 65536,
          "description": "Size, in bytes of a cache block (as seen by cache maintence operations)"
        },
        "NUM_EXTERNAL_GUEST_INTERRUPTS": {
          "type": "number",
          "minimum": 1,
          "maximum": 63,
          "description": "Number of supported virtualized guest external interrupts.\nCorresponds to the GEILEN parameter in RISC-V specifications."
        }
      }
    }
  },

  "type": "object",
  "required": ["params", "extensions"],
  "properties": {
    "params": {
      "$ref": "#/$defs/params"
    },
    "extensions": {
      "type": "array",
      "description": "Extension names and versions",
      "items": {
        "type": "array",
        "prefixItems": [
          { "type": "string" },
          {
            "oneOf": [
              { "type": "number" },
              {
                "type": "string",
                "pattern": "^[0-9]+(\\.[0-9]+(\\.[0-9]+(-[a-fA-F0-9]+)?)?)?$"
              }
            ]
          }
        ],
        "additionalItems": false
      }
    },

    "hpm_events": {
      "type": "array",
      "items": {
        "type": "string",
        "description": "Event name"
      }
    }
  }
}
