# Copyright (c) Kallal Mukherjee.
# SPDX-License-Identifier: BSD-3-Clause-Clear

# yaml-language-server: $schema=../../../../schemas/inst_schema.json

$schema: "inst_schema.json#"
kind: instruction
name: vqdotu.vv
long_name: Vector quad widening unsigned dot product (vector-vector)
description: |
  Vector quad widening unsigned dot product instruction performing the dot product between two 4-element vectors of 8-bit unsigned integer elements and accumulating it into a 32-bit unsigned integer accumulator.

  This instruction is only defined for SEW=32. It works on an element group with four 8-bit values stored together in a 32-bit bundle. For each input bundle for the dot product there is a corresponding (same index) SEW-wide element in the accumulator source (and destination).

  The "q" in the mnemonic indicates that the instruction is quad-widening. The number of body bundles is determined by `vl`. The operation can be masked, each mask bit determines whether the corresponding element result is active or not.

  The operation performed is:
  ```
  vd[i] = vs2[i][0] * vs1[i][0] + vs2[i][1] * vs1[i][1] + vs2[i][2] * vs1[i][2] + vs2[i][3] * vs1[i][3] + vd[i]
  ```

  Where vs2[i] and vs1[i] are 32-bit bundles containing four 8-bit unsigned integers each.
definedBy: Zvqdotq
assembly: vd, vs2, vs1, vm
encoding:
  match: 101001-----------010-----1010111
  variables:
    - name: vm
      location: 25-25
    - name: vs2
      location: 24-20
    - name: vs1
      location: 19-15
    - name: vd
      location: 11-7
access:
  s: always
  u: always
  vs: always
  vu: always
data_independent_timing: false
operation(): |

sail(): |
  # Vector quad widening unsigned dot product (vector-vector)
  # SEW must be 32, operates on 4-element vectors of 8-bit unsigned integers
  if (SEW != 32) {
    raise(ExceptionCode::IllegalInstruction, mode(), $encoding);
  }

  let SEW = 32;
  let LMUL_pow = get_lmul_pow();
  let num_elem = get_num_elem(LMUL_pow, SEW);

  let 'n = num_elem;
  let 'm = SEW;

  let vm_val  : vector('n, dec, bool)     = read_vmask(num_elem, vm, 0b00000);
  let vs1_val : vector('n, dec, bits('m)) = read_vreg(num_elem, SEW, LMUL_pow, vs1);
  let vs2_val : vector('n, dec, bits('m)) = read_vreg(num_elem, SEW, LMUL_pow, vs2);
  let vd_val  : vector('n, dec, bits('m)) = read_vreg(num_elem, SEW, LMUL_pow, vd);
  result      : vector('n, dec, bits('m)) = undefined;
  mask        : vector('n, dec, bool)     = undefined;

  (result, mask) = init_masked_result(num_elem, SEW, LMUL_pow, vd_val, vm_val);

  foreach (i from 0 to (num_elem - 1)) {
    if mask[i] then {
      # Extract 4 8-bit unsigned elements from each 32-bit bundle
      let vs1_elem0 : bits(8) = vs1_val[i][7:0];
      let vs1_elem1 : bits(8) = vs1_val[i][15:8];
      let vs1_elem2 : bits(8) = vs1_val[i][23:16];
      let vs1_elem3 : bits(8) = vs1_val[i][31:24];

      let vs2_elem0 : bits(8) = vs2_val[i][7:0];
      let vs2_elem1 : bits(8) = vs2_val[i][15:8];
      let vs2_elem2 : bits(8) = vs2_val[i][23:16];
      let vs2_elem3 : bits(8) = vs2_val[i][31:24];

      # Compute dot product: sum of element-wise products (unsigned)
      let dot_product : bits(32) = to_bits(32,
        unsigned(vs1_elem0) * unsigned(vs2_elem0) +
        unsigned(vs1_elem1) * unsigned(vs2_elem1) +
        unsigned(vs1_elem2) * unsigned(vs2_elem2) +
        unsigned(vs1_elem3) * unsigned(vs2_elem3)
      );

      # Accumulate into destination
      result[i] = to_bits(32, unsigned(vd_val[i]) + unsigned(dot_product));
    }
  };

  write_vreg(num_elem, SEW, LMUL_pow, vd, result);
  vstart = zeros();
  RETIRE_SUCCESS
