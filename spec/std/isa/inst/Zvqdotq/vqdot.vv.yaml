# Copyright (c) Kallal Mukherjee.
# SPDX-License-Identifier: BSD-3-Clause-Clear

# yaml-language-server: $schema=../../../../schemas/inst_schema.json

$schema: "inst_schema.json#"
kind: instruction
name: vqdot.vv
long_name: Vector 8-bit Signed-Signed Dot Product (vector-vector)
description: |
  Vector quad widening signed dot product instruction performing the dot product between two 4-element vectors of 8-bit signed integer elements and accumulating it into a 32-bit signed integer accumulator.

  This instruction is only defined for SEW=32. It works on an element group with four 8-bit values stored together in a 32-bit bundle. For each input bundle for the dot product there is a corresponding (same index) SEW-wide element in the accumulator source (and destination).

  The "q" in the mnemonic indicates that the instruction is quad-widening. The number of body bundles is determined by `vl`. The operation can be masked, each mask bit determines whether the corresponding element result is active or not.

  The operation performed is:
  ```
  vd[i] = vs2[i][0] * vs1[i][0] + vs2[i][1] * vs1[i][1] + vs2[i][2] * vs1[i][2] + vs2[i][3] * vs1[i][3] + vd[i]
  ```

  Where vs2[i] and vs1[i] are 32-bit bundles containing four 8-bit signed integers each.
definedBy: Zvqdotq
assembly: vd, vs2, vs1, vm
encoding:
  match: 101100-----------010-----1010111
  variables:
    - name: vm
      location: 25-25
    - name: vs2
      location: 24-20
    - name: vs1
      location: 19-15
    - name: vd
      location: 11-7
access:
  s: always
  u: always
  vs: always
  vu: always
data_independent_timing: false
operation(): |
  # Vector 8-bit Signed-Signed Dot Product (vector-vector)
  # SEW must be 32, operates on 4-element vectors of 8-bit signed integers

  if (SEW != 32) {
    raise(ExceptionCode::IllegalInstruction, $encoding);
  }

  # Process each vector element
  for (i in 0..<vl) {
    if (vm[i] || vm == 1) {  # Check mask
      # Extract 4 8-bit signed elements from each 32-bit bundle
      vs1_elem0 = signed(vs1[i][7:0]);
      vs1_elem1 = signed(vs1[i][15:8]);
      vs1_elem2 = signed(vs1[i][23:16]);
      vs1_elem3 = signed(vs1[i][31:24]);

      vs2_elem0 = signed(vs2[i][7:0]);
      vs2_elem1 = signed(vs2[i][15:8]);
      vs2_elem2 = signed(vs2[i][23:16]);
      vs2_elem3 = signed(vs2[i][31:24]);

      # Compute dot product: sum of element-wise products
      dot_product = vs1_elem0 * vs2_elem0 +
                    vs1_elem1 * vs2_elem1 +
                    vs1_elem2 * vs2_elem2 +
                    vs1_elem3 * vs2_elem3;

      # Accumulate into destination
      vd[i] = signed(vd[i]) + dot_product;
    }
  }
