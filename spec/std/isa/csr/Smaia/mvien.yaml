# Copyright (c) 2025 Kallal Mukherjee
# SPDX-License-Identifier: BSD-3-Clause-Clear

# yaml-language-server: $schema=../../../schemas/csr_schema.json

$schema: "csr_schema.json#"
kind: csr
name: mvien
long_name: Machine Virtual Interrupt Enable
address: 0x308
priv_mode: M
length: MXLEN
writable: true
description: |
  The `mvien` register enables virtual interrupts in M-mode. This register
  controls which virtual interrupts can be taken when the hart is in M-mode.
  
  The `mvien` register is a WARL register that must be able to hold the value zero.
  
  For interrupt numbers 13-63, implementations may freely choose which bits of mvien are writable and which bits are read-only zero or one. If such a bit in mvien is read-only zero (preventing the virtual interrupt from being enabled), the same bit should be read-only zero in mvip. All other bits for interrupts 13-63 must be writable in mvip.
definedBy: Smaia
fields:
  VSSIE:
    location: 1
    long_name: Virtual Supervisor Software Interrupt Enable
    description: |
      Virtual supervisor software interrupt enable.
    type: RW
    reset_value: 0
    definedBy: Smaia
  VSTIE:
    location: 5
    long_name: Virtual Supervisor Timer Interrupt Enable
    description: |
      Virtual supervisor timer interrupt enable.
    type: RW
    reset_value: 0
    definedBy: Smaia
  VSEIE:
    location: 9
    long_name: Virtual Supervisor External Interrupt Enable
    description: |
      Virtual supervisor external interrupt enable.
    type: RW
    reset_value: 0
    definedBy: Smaia
sw_read(): |
  return value;
sw_write(csr_value): |
  Bits<MXLEN> writable_mask = 0;
  
  // Bits 0-12 are always writable
  writable_mask[12:0] = {13{1'b1}};
  
  // For bits 13-63, check configuration
  for (int i = 13; i <= 63; i++) {
    if (MACHINE_VIRTUAL_INTERRUPTS.include?(i)) {
      writable_mask[i] = 1;
    }
  }
  
  return (value & writable_mask) | (csr_value & ~writable_mask);