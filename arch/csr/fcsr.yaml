# yaml-language-server: $schema=csr_schema.json

fcsr:
  long_name: Floating-point control and status register (`frm` + `fflags`)
  address: 0x003
  description: |
    A 32-bit read/write register that selects the dynamic rounding mode for floating-point
    arithmetic operations and holds the accrued exception flags.

    Floating-point operations use either a static rounding mode encoded in the instruction,
    or a dynamic rounding mode held in frm. 
    The accrued exception flags indicate the exception conditions that have arisen on
    any floating-point arithmetic instruction since the field was last reset by software.

  priv_mode: U
  length: 32
  definedBy: I
  fields:
    RMODE:
      location: 7-5
      description: |
        Rounding modes are encoded as follows:

        [%autowidth,float="center",align="center",cols="^,^,<",options="header"]
        !===
        !Rounding Mode |Mnemonic |Meaning
        !000 !RNE !Round to Nearest, ties to Even
        !001 !RTZ !Round towards Zero
        !010 !RDN !Round Down (towards latexmath:[$-\infty$])
        !011 !RUP !Round Up (towards latexmath:[$+\infty$])
        !100 !RMM !Round to Nearest, ties to Max Magnitude
        !101 ! !_Reserved for future use._
        !110 ! !_Reserved for future use._
        !111 !DYN !In instruction's _rm_ field, selects dynamic rounding mode; In Rounding Mode register, _reserved_.
        !===

        A value of 111 in the
        instruction's _rm_ field selects the dynamic rounding mode held in
        `frm`. The behavior of floating-point instructions that depend on
        rounding mode when executed with a reserved rounding mode is _reserved_,
        including both static reserved rounding modes (101-110) and dynamic reserved
        rounding modes (101-111). Some instructions, including widening conversions,
        have the _rm_ field but are nevertheless mathematically unaffected by the
        rounding mode; software should set their _rm_ field to 
        RNE (000) but implementations must treat the _rm_ field as usual (in
        particular, with regard to decoding legal vs. reserved encodings).
      type: RW-H
      reset_value: 0
    NV:
      location: 4
      description: |
        *Invalid Operation*

        Cumulative error flag for floating point operations.

        Set by hardware when a floating point operation is invalid and stays set until explicitly
        cleared by software.
      type: RW-H
      reset_value: 0
    DZ:
      location: 3
      description: |
        *Divide by zero*

        Cumulative error flag for floating point operations.

        Set by hardware when a floating point divide attempts to divide by zero and stays set until explicitly
        cleared by software.
      type: RW-H
      reset_value: 0
    OF:
      location: 2
      description: |
        *Overflow*

        Cumulative error flag for floating point operations.

        Set by hardware when a floating point operation overflows and stays set until explicitly
        cleared by software.
      type: RW-H
      reset_value: 0
    UF:
      location: 1
      description: |
        *Underflow*

        Cumulative error flag for floating point operations.

        Set by hardware when a floating point operation underflows and stays set until explicitly
        cleared by software.
      type: RW-H
      reset_value: 0
    NX:
      location: 0
      description: |
        *Inexact*

        Cumulative error flag for floating point operations.

        Set by hardware when a floating point operation is inexact and stays set until explicitly
        cleared by software.
      type: RW-H
      reset_value: 0
