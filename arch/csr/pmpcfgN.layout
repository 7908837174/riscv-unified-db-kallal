# yaml-language-server: $schema=csr_schema.json

# <%- raise "'pmpcfg_num' must be defined" if pmpcfg_num.nil? -%>

# this single template is used to generate all of the pmpNcfg csrs

<%-
  entries_this_register_32 = [NUM_PMP_ENTRIES - pmpcfg_num*4, 4].min
  entries_this_register_64 = [NUM_PMP_ENTRIES - (pmpcfg_num/2)*8, 8].min
  entries_this_register = [XLEN == 32 ? entries_this_register_32 : entries_this_register_64, 0].max

  starting_entry_32 = pmpcfg_num*4
  starting_entry_64 = (pmpcfg_num/2)*8
  starting_entry = XLEN == 32 ? starting_entry_32 : starting_entry_64
-%>

<%= "pmpcfg#{pmpcfg_num}" %>:
  <%- if pmpcfg_num.odd? -%>
  base: 32 # odd numbered pmpcfg registers do not exist in RV64
  <%- end -%>
  long_name: PMP Configuration Register <%= pmpcfg_num %>
  address: <%= "0x" + (0x3A0 + pmpcfg_num).to_s(16).upcase %>
  priv_mode: M
  length: <%= XLEN %>
  description: PMP entry configuration
  definedBy: I
  <%- if entries_this_register <= 0 -%>
  fields: {}
  <%- else -%>
  fields:
  <%- entries_this_register.times do |i| -%>
    pmp<%= starting_entry + i %>cfg:
      location: <%= ((i+1)*8)-1 %>-<%= i*8 %>
      description: |
        *PMP configuration for entry <%= starting_entry + i %>*

        The bits are as follows:

        [%autowidth]
        !===
        ! Name ! Location ! Description

        h! L ! <%= ((i+1)*8)-1 %>   ! Locks the entry from further modification. Additionally, when set, PMP checks also apply to M-mode for the entry.
        h! - ! <%= ((i+1)*8)-2 %>:<%= ((i+1)*8)-3 %> ! _Reserved_ Writes shall be ignored.
        h! A ! <%= ((i+1)*8)-4 %>:<%= ((i+1)*8)-5 %>
        a! Address matching mode. One of:
          
            * *OFF* (0) - Null region (disabled)
            * *TOR* (1) - Top of range
            <%- if PMP_GRANULARITY < 2 -%>
            * *NA4* (2) - Naturally aligned four-byte region
            <%- end -%>
            * *NAPOT* (3) - Natrually aligned power of two

        <%- if PMP_GRANULARITY >= 2 -%>
        Naturally aligned four-byte region, *NA4* (2), is not valid (not needed when the PMP granularity is larger than 4 bytes).
        <%- end -%>
        
        h! X ! <%= ((i)*8)+2 %> ! When clear, instruction fetchs cause an `Access Fault` for the matching region and privilege mode.
        h! W ! <%= ((i)*8)+1 %> ! When clear, stores and AMOs cause an `Access Fault` for the matching region and privilege mode.
        h! R ! <%= ((i)*8)+0 %> ! When clear, loads cause an `Access Fault` for the matching region and privilege mode.
        !===

        The combination of R = 0, W = 1 is reserved.
      type: RW-R
      write(value): |
        if ((CSR[<%= "pmpcfg#{pmpcfg_num}" %>].pmp<%= starting_entry + i %>cfg & 0x80) == 0) {
          # entry is not locked
          if (!(((value.pmp<%= starting_entry + i %>cfg & 0x1) == 0) && ((value.pmp<%= starting_entry + i %>cfg & 0x2) == 0x2))) {
            # not R = 0, W =1, which is reserved
            if ((PMP_GRANULARITY < 2) ||
                ((value.pmp<%= starting_entry + i %>cfg & 0x18) != 0x10)) {
              # NA4 is not allowed when PMP granularity is larger than 4 bytes
              return write_value.pmp<%= starting_entry + i %>cfg;
            }
          }
        }
        # fall through: keep old value
        return CSR[<%= "pmpcfg#{pmpcfg_num}" %>].pmp<%= starting_entry + i %>cfg;
      reset_value: 0
  <%- end -%>
  <%- end -%>