RVB23:
  name: RVB23
  marketing_name: RVB23
  class: RVB
  release: 23
  state: ratified   # current status ["ratified", "development"]
  ratification_date: "2023-04-03"
  # Semantic versions within the release
  versions: 
  - version: "1.0.0"

  introduction: |
    This profile release targets 64-bit application processors for markets
    requiring a high-degree of binary compatibility between compliant implementations.
  description: |
    This profile release is intended to be used for 64-bit application
    processors running rich OS stacks.  Only user-mode and
    supervisor-mode profiles are specified in this release.

    NOTE: There is no machine-mode profile currently defined for this release.
    A machine-mode profile for application processors would only be used in specifying platforms for
    portable machine-mode software. Given the relatively low volume of
    portable M-mode software in this domain, the wide variety of potential
    M-mode code, and the very specific needs of each type of M-mode
    software, we are not specifying individual M-mode ISA requirements in this release.

    NOTE: Only XLEN=64 application processor profiles are currently defined.
    It would be possible to also define very similar XLEN=32 variants.
  
  profiles:
    RVB23U64:
      marketing_name: RVB23U64
      mode: Unpriv
      base: 64
      release: RVB23
      introduction: |
        The RVB23U64 profile specifies the ISA features available to user-mode
        execution environments in 64-bit applications processors.  This is the
        most important profile within application processors in
        terms of the amount of software that targets this profile.
      extensions:
        #########################################################################
        # imported from RVA22
        #########################################################################
        $inherits: "RVA22.yaml#/RVA22/profiles/RVA22U64/extensions"

        #########################################################################
        # MANDATORY extensions in RVB23 (and RVA23)
        #########################################################################
        Zihintntl:
          presence: mandatory
          version: "~>1.0"
          note: |
            Non-temporal memory-access locality hints
        Zicond:
          presence: mandatory
          version: "~>1.0"
          note: |
            Integer conditional operations
        Zimop:
          presence: mandatory
          version: "~>1.0"
          note: |
            May-be operations
        Zcmop:
          presence: mandatory
          version: "~>1.0"
          note: |
            Commpressed (16-bit) may-be operations
        Zcb:
          presence: mandatory
          version: "~>1.0"
          note: |
            Additional compressed (16-bit) instructions  
        Zfa:
          presence: mandatory
          version: "~>1.0"
          note: |
            Additional floating-point instructions 
        Zawrs:
          presence: mandatory
          version: "~>1.0"
          note: |
            Wait-on-reservation-set (WRS) instructions
        Za64rs:
          presence: mandatory
          version: "~>1.0"
          note: |
            Reservation sets are contiguous, naturally aligned, and a maximum of 64 bytes

        #########################################################################
        # OPTIONAL LOCALIZED extensions  
        #########################################################################
        
        #---------------------------------
        # In RVB23 (and RVA23)
        #---------------------------------
        Zvkng:
          presence: 
            optional: localized
          version: "~>1.0"
          note: |
            Vector crypto NIST Algorithms with GCM
        Zvksg:
          presence: 
            optional: localized
          version: "~>1.0"
          note: |
            Vector crypto Shang-Mi Algorithms with GCM

        #---------------------------------
        # In RVB23 (but not in RVA23)
        #---------------------------------
        Zvkg:
          presence: 
            optional: localized
          version: "~>1.0"
          note: |
            Vector GCM/GMAC instructions
        
        Zvknc:
          presence: 
            optional: localized
          version: "~>1.0"
          note: |
            Vector crypto NIST algorithms with carryless multiply. 
            To reduce implementation cost, RVB profiles allow this carryless multiply option to 
            implement GCM efficiently, with GHASH available as a separate option.
          # RVA23 does not include Zvknc because it mandates the higher-performing 
          # but more expensive GHASH options when adding vector crypto.
        Zvksc:
          presence: 
            optional: localized
          version: "~>1.0"
          note: |
            Vector crypto Shang-Mi algorithms with carryless multiply. 
            To reduce implementation cost, RVB profiles allow this carryless multiply option to 
            implement GCM efficiently, with GHASH available as a separate option.
          # RVA23 does not include Zvksc because it mandates the higher-performing 
          # but more expensive GHASH options when adding vector crypto.
        
        Zkn:
          presence: 
            optional: localized
          version: "~>1.0"
          note: |
            Scalar crypto NIST algorithms
        Zks:
          presence: 
            optional: localized
          version: "~>1.0"
          note: |
            Scalar crypto Shang-Mi algorithms
        # RVA23 profiles drop support for the above scalar crypto as an option, as the vector 
        # extension is now mandatory in RVA23. 
        # RVB23 profiles do support scalar crypto as an option, as the vector extension is optional in RVB23.
        
        #########################################################################
        # OPTIONAL DEVELOPMENT extensions in RVB23  
        #########################################################################
        # The following are new development options, intended to become mandatory in a later RVB profile:
        Zabha:
          presence: 
            optional: development
          version: "~>1.0"
          note: |
            Byte and halfword atomic memory operations
        Zacas:
          presence: 
            optional: development
          version: "~>1.0"
          note: |
            Compare-and-Swap instructions
        Ziccamoc:
          presence: 
            optional: development
          version: "~>1.0"
          note: |
            Main memory regions with both the cacheability and coherence PMAs 
            must provide AMOCASQ-level PMA support
        Zama16b:
          presence: 
            optional: development
          version: "~>1.0"
          note: |
            Misaligned loads, stores, and AMOs to main memory regions that do not cross 
            Daaaa naturally aligned 16-byte boundary are atomic
        
        #########################################################################
        # OPTIONAL EXPANSION extensions in RVB23  
        #########################################################################
        
        #---------------------------------
        # Optional in RVB23U64 (but Mandatory in RVA23U64)
        #---------------------------------
        Zfhmin:
          presence: 
            optional: expansion
          version: "~> 1.0"
          note: |
            Zfhmin is a small extension that adds support to load/store and convert
            IEEE 754 half-precision numbers to and from the IEEE 754 single-precision
            format.  The hardware cost for this extension is low, and mandating the
            extension avoids adding an option to the profile.
        V:
          presence: 
            optional: expansion
          version: "~> 1.0"
          note: |
             The Vector extension
        # Note: it is unclear if other Zve* extensions should also be supported in RVB 

        Zvfhmin:
          presence: 
            optional: expansion
          version: "~>1.0"
          note: |
            Vector minimal half-precision floating-point
        Zvbb:
          presence: 
            optional: expansion
          version: "~>1.0"
          note: |
            Vector basic bit-manipulation instructions 
        Zvkt:
          presence: 
            optional: expansion 
          version: "~>1.0"
          note: |
            Vector basic bit-manipulation instructions 
        Supm:
          presence: 
            optional: expansion
          version: "~>1.0"
          note: |
            Pointer masking, with the execution environment providing 
            a means to select PMLEN=0 and PMLEN=7 at minimum 
       
        #--------------------------------------------
        # Expansion options in RVB23 (and also RVA23)
        #--------------------------------------------
        Zfh:
          presence: 
            optional: expansion 
          version: "~>1.0"
          note: A future RVB profile might mandate V.
        Zbc:
          presence: 
            optional: expansion 
          version: "~>1.0"
          note: Scalar carryless multiplication
        Zicfilp:
          presence: 
            optional: expansion 
          version: "~>1.0"
          note: Landing Pads
        Zicfiss:
          presence: 
            optional: expansion 
          version: "~>1.0"
          note: Shadow Stack
        Zvfh:
          presence: 
            optional: expansion 
          version: "~>1.0"
          note: Vector half-precision floating-point
        Zfbfmin:
          presence: 
            optional: expansion 
          version: "~>1.0"
          note: Scalar BF16 conversion instructions
        Zvfbfmin:
          presence: 
            optional: expansion 
          version: "~>1.0"
          note: Vector BF16 conversion instructions
        Zvfbfwma:
          presence: 
            optional: expansion 
          version: "~>1.0"
          note: Vector BF16 widening mul-add instruction

        #--------------------------------------------
        # Zvbc is an expansion option in RVB23U64
        # (but is not intended to be made mandatory in future RVB Profiles)
        # It will be listed in RVA23U64 as a *development* option,
        # as it is intended to become mandatory in future RVA Profiles.
        #--------------------------------------------
        Zvbc:
          presence: 
            optional: expansion 
          version: "~>1.0"
          note: Vector carryless multiplication

        #--------------------------------------------
        # Ssstrict is an expansion option in RVB2U64 and RVA23U64
        # (but is not intended to be made mandatory in future RVB or RVA Profiles)
        #--------------------------------------------
        Sstrict:
          presence: 
            optional: expansion 
          version: "~>1.0"
          note: |
            all opcodes in the Standard and Reserved opcode spaces (SROS), 
            other than those identified in a Profile as Mandatory or Optional,
            cause a trap.
          # should the above say "current or subsequent Profile" rather than just "Profile"?
          # (where is the official definition of Ssstrict?)


        #########################################################################
        # TRANSITORY EXPANSION extensions in RVB23  
        #########################################################################

        #--------------------------------------------
        # (there are no Transitory expansion options in RVB23)
        #--------------------------------------------


        
    RVB23S64:
      marketing_name: RVB23S64
      mode: S
      base: 64
      release: RVB23
      introduction: |
        The RVB23S64 profile specifies the ISA features available to supervisor-mode
        execution environments in 64-bit applications processors. 
        An ECALL in user mode causes a contained trap to supervisor mode.
        An ECALL in supervisor mode causes a requested trap to the execution environment.
      extensions:
        #########################################################################
        # imported from RVA23U64
        #########################################################################
        $inherits: "RVA22.yaml#/RVA22/profiles/RVA22S64/extensions"

        #########################################################################
        # MANDATORY extensions in RVB23 (and RVA23)
        #########################################################################
        Zifencei:
          presence: mandatory
          version: "~>1.0"
          note: |
            Instruction-Fetch fence instruction.
            
            Zifencei is mandated as it is the only standard way to support
            instruction-cache coherence in RVB23 application processors. 
            A new instruction-cache coherence mechanism is under development 
            (tentatively named Zjid), which might be added as an option in the future.

        Ss1p13:
          presence: mandatory
          version: "~>1.0"
          note: |
            Privileged architecture version 1.13

        Svnapot:
          presence: mandatory
          version: "~>1.0"
          note: |
            NAPOT translation contiguity.
            Svnapot is very low cost to provide, so is made mandatory even in RVB.

        Svbare:
          presence: mandatory
          version: "~>1.0"
          note: |
            The *satp* mode Bare must be supported

        Sv39:
          presence: mandatory
          version: "~>1.0"
          note: |
            Page-Based 39-bit Virtual-Memory System

        Svade:
          presence: mandatory
          version: "~>1.0"
          note: |
            A page-fault exception is raised when a page is accessed when A bit = 0 ,
            or when a page is written when D bit = 0

        Ssccptr:
          presence: mandatory
          version: "~>1.0"
          note: |
            Main memory regions with both the cacheability and coherence PMAs must
            support hardware page-table reads

        Sstvecd:
          presence: mandatory
          version: "~>1.0"
          note: |
            *stvec*.MODE must be capable of holding the value 0 (Direct).
            When *stvec*.MODE=Direct,
            *stvec*.BASE must be capable of holding any valid four-byte-aligned address
            
        Sstvala:
          presence: mandatory
          version: "~>1.0"
          note: |
            *stval* must be written with the faulting virtual address for load, store,
            and instruction page-fault, access-fault, and misaligned exceptions,
            and for breakpoint exceptions other than those caused by execution of
            the EBREAK or C.EBREAK instructions.
            For virtual-instruction and illegal instruction exceptions,
            *stval* must be written with the faulting instruction .

        Sscounterenw:
          presence: mandatory
          version: "~>1.0"
          note: |
            For any *hpmcounter* that is not read-only zero,
            the corresponding bit in *scounteren* must be writable.

        Svpbmt:
          presence: mandatory
          version: "~>1.0"
          note: |
            Page-based memory types

        Svinval:
          presence: mandatory
          version: "~>1.0"
          note: |
            Fine-grained address-translation cache invalidation

        Sstc:
          presence: mandatory
          version: "~>1.0"
          note: |
            Supervisor-mode timer interrupts.
            
            NOTE: Sstc was not made mandatory in RVB23S64 as it is a more
            disruptive change affecting system-level architecture, and will take
            longer for implementations to adopt.  It is expected to be made
            mandatory in the next profile release.

        Sscofpmf:
          presence: mandatory
          version: "~>1.0"
          note: |
            Count overflow and mode-based filtering.
            Platforms may choose to mandate the presence of Sscofpmf.

        Ssu64xl:
          presence: mandatory
          version: "~>1.0"
          note: |
            *sstatus*.UXL must be capable of holding the value 2
            (that is, UXLEN=64 must be supported)



        #########################################################################
        # OPTIONAL LOCALIZED extensions in RVB23S64 
        #########################################################################

        # there are no Optional Localized extensions in RVB23S64

        #########################################################################
        # OPTIONAL DEVELOPMENT extensions in RVB23S64 
        #########################################################################

        # there are no Optional Development extensions in RVB23S64


        #########################################################################
        # OPTIONAL EXPANSION extensions in RVB23S64 (mandatory in RVA23S64)
        #########################################################################

        Ssnpm:
          presence: 
            optional: expansion
          version: "~>1.0"
          note: |
            Pointer masking, with *senvcfg*.PME supporting, at minimum,
            settings PMLEN=0 and PMLEN=7

        Sha:
          presence: 
            optional: expansion
          version: "~>1.0"
          note: |
            The augmented hypervisor extension

        __NEED_AN_EXTENSION_NAME_HERE__:
          presence: 
            optional: expansion
          version: "~>1.0"
          when:
            allOf:
            - implemented: H
            - implemented: Ssnpm
          note: |
            If the hypervisor extension is implemented
            and pointer masking (Ssnpm) is supported
            then *henvcfg*.PME must support at minimum, settings PMLEN=0 and PMLEN=7


        #########################################################################
        # OPTIONAL EXPANSION extensions in both RVB23S64 and RVA23S64
        #########################################################################

        Sv48:
          presence: 
            optional: expansion
          version: "~>1.0"
          note: |
            Page-based 48-bit virtual-memory system

        Sv57:
          presence: 
            optional: expansion
          version: "~>1.0"
          note: |
            Page-based 57-bit virtual-memory system

        Svadu:
          presence: 
            optional: expansion
          version: "~>1.0"
          note: |
            Hardware A/D bit updates 

        Zkr:
          presence: 
            optional: expansion
          version: "~>1.0"
          note: |
            Entropy CSR 
            
            NOTE: Technically, Zk is also a privileged-mode option, capturing that
            Zkr, Zkn, and Zkt are all implemented.  However, the Zk rollup is less
            descriptive than specifying the individual extensions explicitly.

        Sdtrig:
          presence: 
            optional: expansion
          version: "~>1.0"
          note: |
            Debug triggers

        Ssstrict:
          presence: 
            optional: expansion
          version: "~>1.0"
          note: |
            No non-conforming extensions are present.
            Attempts to execute unimplemented opcodes or access unimplemented CSRs in the
            standard or reserved encoding spaces raises an illegal instruction exception
            that results in a contained trap to the supervisor-mode trap handler
            
            NOTE: Ssstrict does not prescribe behavior for the custom encoding spaces or CSRs.

            NOTE: Ssstrict definition applies to the execution environment claiming to be
            RVB23-compatible, which must have the hypervisor extension.
            That execution environment will take a contained trap to supervisor-mode
            (however that trap is implemented, including, but not limited to,
            emulation/delegation in the outer execution environment).
            Ssstrict (and all the other RVB23 mandates and options) do not apply to
            any guest VMs run by a hypervisor. 
            An RVB23 hypervisor can provide guest VMs that are also RVB23-compatible
            but with an expanded set of emulated standard instructions.
            An RVB23 hypervisor can also choose to implement guest VMs that are not
            RVB23 compatible (for example, only RVA20 or only RVA22)
          # that last parenthesized phrase for the RVA23 Profile would change to: 
          #     (for example, lacking H, or only RVA20)

        Svvptc:
          presence: 
            optional: expansion
          version: "~>1.0"
          note: |
            Transitions from invalid to valid PTEs will be visible in bounded time
            without an explicit memory-management fence.

        Sspm:
          presence: 
            optional: expansion
          version: "~>1.0"
          note: |
            Supervisor-mode pointer masking, with the supervisor execution environment
            providing a means to select PMLEN=0 and PMLEN=7 (at minimum).

      recommendations:
      - text: |
          Implementations are strongly recommended to raise illegal-instruction
          exceptions on attempts to execute unimplemented opcodes.

