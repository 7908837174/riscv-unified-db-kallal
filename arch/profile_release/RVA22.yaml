RVA22:
  name: RVA22
  marketing_name: RVA22
  class: RVA
  release: 22
  state: ratified # current status ["ratified", "development"]
  ratification_date: "2023-04-03"

  # Semantic versions within the release
  versions: 
  - version: "1.0.0"

  introduction: |
    This profile release targets 64-bit application processors for markets
    requiring a high-degree of binary compatibility between compliant implementations.
  description: |
    This profile release is intended to be used for 64-bit application
    processors running rich OS stacks.  Only user-mode and
    supervisor-mode profiles are specified in this release.

    NOTE: There is no machine-mode profile currently defined for this release.
    A machine-mode profile for application processors would only be used in specifying platforms for
    portable machine-mode software. Given the relatively low volume of
    portable M-mode software in this domain, the wide variety of potential
    M-mode code, and the very specific needs of each type of M-mode
    software, we are not specifying individual M-mode ISA requirements in this release.

    NOTE: Only XLEN=64 application processor profiles are currently defined.
    It would be possible to also define very similar XLEN=32 variants.
  contributors:
  - name: Krste Asanovic
    email: krste@sifive.com
    company: SiFive
  profiles:
    RVA22U64:
      marketing_name: RVA22U64
      mode: Unpriv
      base: 64
      release: RVA22
      introduction: |
        The RVA22U64 profile specifies the ISA features available to user-mode
        execution environments in 64-bit applications processors.  This is the
        most important profile within application processors in
        terms of the amount of software that targets this profile.
      extensions:
        $inherits: "profile_release/RVA20.yaml#/RVA20/profiles/RVA20U64/extensions"
        Zihpm:
          presence: mandatory
          version: "~> 2.0"
        Zihintpause:
          presence: mandatory
          version: "~> 2.0"
          note: |
            While the `pause` instruction is a HINT can be implemented as a
            NOP and hence trivially supported by hardware implementers, its
            inclusion in the mandatory extension list signifies that software
            should use the instruction whenever it would make sense and that
            implementors are expected to exploit this information to optimize
            hardware execution.
        Zba:
          presence: mandatory
          version: "~> 1.0"
        Zbb:
          presence: mandatory
          version: "~> 1.0"
        Zbs:
          presence: mandatory
          version: "~> 1.0"
        Zic64b:
          presence: mandatory
          version: "~> 1.0"
          note: |
            This is a new extension name for this feature. While the general
            RISC-V specifications are agnostic to cache block size, selecting a
            common cache block size simplifies the specification and use of the
            following cache-block extensions within the application processor
            profile. Software does not have to query a discovery mechanism and/or
            provide dynamic dispatch to the appropriate code. We choose 64 bytes
            at it is effectively an industry standard. Implementations may use
            longer cache blocks to reduce tag cost provided they use 64-byte
            sub-blocks to remain compatible. Implementations may use shorter cache
            blocks provided they sequence cache operations across the multiple
            cache blocks comprising a 64-byte block to remain compatible.
        Zicbom:
          presence: mandatory
          version: "~> 1.0"
        Zicbop:
          presence: mandatory
          version: "~> 1.0"
          note: |
            As with other HINTS, the inclusion of prefetches in the
            mandatory set of extensions indicates that software should generate
            these instructions where they are expected to be useful, and hardware
            is expected to exploit that information.
        Zicboz:
          presence: mandatory
          version: "~> 1.0"
        Zfhmin:
          presence: mandatory
          version: "~> 1.0"
          note: |
            Zfhmin is a small extension that adds support to load/store and convert
            IEEE 754 half-precision numbers to and from the IEEE 754 single-precision
            format.  The hardware cost for this extension is low, and mandating the
            extension avoids adding an option to the profile.
        Zkt:
          presence: mandatory
          version: "~> 1.0"
          note: |
            Zkt requires a certain subset of integer instructions execute
            with data-independent latency.  Mandating this feature enables
            portable libraries for safe basic cryptographic operations. It is
            expected that application processors will naturally have this property
            and so implementation cost is low, if not zero, in most systems that
            would support RVA22.
        Zfh:
          presence: optional
          version: "~> 1.0"
          note: A future profile might mandate V.
        V:
          presence: optional
          version: "~> 1.0"
          note: |
            The smaller vector extensions (Zve32f, Zve32x, Zve64d, Zve64f,
            Zve64x) are not provided as separately supported profile options. The
            full V extension is specified as the only supported profile option.
      
            A future profile might mandate V.
        Zkn:
          presence: optional
          version: "~> 1.0"
        Zks:
          presence: optional
          version: "~> 1.0"
      extra_notes:
      - presence: optional
        text: |
          The scalar crypto extensions are expected to be superseded by
          vector crypto standards in future profiles, and the scalar extensions
          may be removed as supported options once vector crypto is present.
      - presence: optional
        text: |
          The smaller component scalar crypto extensions (Zbc, Zbkb, Zbkc,
          Zbkx, Zknd, Zkne, Zknh, Zksed, Zksh) are not provided as separate
          options in the profile.  Profile implementers should provide all of
          the instructions in a given algorithm suite as part of the Zkn or Zks
          supported options.
      - presence: optional
        text: |
          Access to the entropy source (Zkr) in a system is usually
          carefully controlled.  While the design supports unprivileged access
          to the entropy source, this is unlikely to be commonly used in an
          application processor, and so Zkr was not added as a profile option.
          This also means the roll-up Zk was not added as a profile option.
      - presence: optional
        text: |
          The Zfinx, Zdinx, Zhinx, Zhinxmin extensions are incompatible
          with the profile mandates to support the F and D extensions.
      recommendations:
      - text: |
          Implementations are strongly recommended to raise illegal-instruction
          exceptions on attempts to execute unimplemented opcodes.
    RVA22S64:
      marketing_name: RVA22S64
      mode: S
      base: 64
      release: RVA22
      introduction: |
        The RVA22S64 profile specifies the ISA features available to a
        supervisor-mode execution environment in 64-bit applications
        processors.  RVA22S64 is based on privileged architecture version
        1.12.
      extensions:
        $inherits: "profile_release/RVA20.yaml#/RVA20/profiles/RVA20S64/extensions"
        S:
          presence: mandatory
          version: "~> 1.12"
        Sscounterenw:
          presence: mandatory
          version: "~> 1.0"
          note: |
            Sstvala is a new extension name introduced with RVA22.
        Svpbmt:
          presence: mandatory
          version: "~> 1.0"
        Svinval:
          presence: mandatory
          version: "~> 1.0"
        Ssstateen:
          presence: mandatory
          version: "~> 1.0"
          when:
            implemented: H
          note: |
            Ssstateen is a new extension name introduced with RVA22.
        Shvstvala:
          presence: mandatory
          version: "~> 1.0"
          when:
            implemented: H
          note: |
            Shvstvala is a new extension name introduced with RVA22.
        Shtvala:
          presence: mandatory
          version: "~> 1.0"
          when:
            implemented: H
          note: |
            Shtvala is a new extension name introduced with RVA22.
        Shvstvecd:
          presence: mandatory
          version: "~> 1.0"
          when:
            implemented: H
          note: |
            Shvstvecd is a new extension name introduced with RVA22.
        Shgatpa:
          presence: mandatory
          version: "~> 1.0"
          when:
            implemented: H
          note: |
            Shgatpa is a new extension name introduced with RVA22.
        Sv57:
          presence: optional
          version: "~> 1.12"
        Svnapot:
          presence: optional
          version: "~> 1.0"
          note: |
            It is expected that Svnapot will be mandatory in the next
            profile release.
        Sstc:
          presence: optional
          version: "~> 1.0"
          note: |
            Sstc was not made mandatory in RVA22S64 as it is a more
            disruptive change affecting system-level architecture, and will take
            longer for implementations to adopt.  It is expected to be made
            mandatory in the next profile release.
        Sscofpmf:
          presence: optional
          version: "~> 1.0"
          note: |
            Platforms may choose to mandate the presence of Sscofpmf.
        Zkr:
          presence: optional
          version: "~> 1.0"
          note: |
            Technically, Zk is also a privileged-mode option capturing that
            Zkr, Zkn, and Zkt are all implemented.  However, the Zk rollup is less
            descriptive than specifying the individual extensions explicitly.
        H:
          presence: optional
          version: "~> 1.0"
          note: |
            The following extensions become mandatory when H is implemented:
      
             * Ssstateen
             * Shcounterenw
             * Shvstvala
             * Shtvala
             * Shvstvecd
             * Shgatpa
      recommendations:
      - text: |
          Implementations are strongly recommended to raise illegal-instruction
          exceptions on attempts to execute unimplemented opcodes.